# colnames(design)[c(2,3)] = c(as.vector(na.omit(str_extract(colnames(design), '[a-z]+_[a-z]+'))),
#                              as.vector(na.omit(str_extract(colnames(design), 'b[8186]+')))
#                              )
rownames(design) = colnames(counts_tmp)
keep = filterByExpr(counts_tmp, design=design)
counts_tmp = counts_tmp[keep, ]
counts_tmp = estimateDisp(counts_tmp, design, robust=T)
fit = glmQLFit(counts_tmp, design)
qlft = glmQLFTest(fit)
# Plot histogram of nominal pvalues
pval_h[[i]] = ggplot(qlft$table) +
geom_histogram(aes(x=PValue)) +
ggtitle(i)
# Use two methods for multiple sample comparison p value correction
topDE_Holm = topTags(qlft, n=40000, adjust.method='holm')
topDE_BH = topTags(qlft, n=40000, adjust.method='BH')
all_tests[[i]] = list(BH=topDE_BH, Holm=topDE_Holm)
de_list = list(
DEGenes_BH = topDE_BH$table %>%
rownames_to_column('gene_symbol') %>%
mutate(abslogFC=abs(.$logFC)) %>%
arrange(FDR, desc(abslogFC)) %>%
filter(FDR < 0.05) %>%
select(-abslogFC),
DEGenes_Holm = topDE_Holm$table %>%
rownames_to_column('gene_symbol') %>%
mutate(abslogFC=abs(.$logFC)) %>%
arrange(FWER, desc(abslogFC)) %>%
filter(FWER < 0.05) %>%
select(-abslogFC),
Non_DEGenes_BH = topDE_BH$table %>%
rownames_to_column('gene_symbol') %>%
arrange(desc(logCPM)) %>%
filter(FDR >= 0.05) %>%
filter(logCPM > quantile(.$logCPM, 0.5)),
Non_DEGenes_Holm = topDE_Holm$table %>%
rownames_to_column('gene_symbol') %>%
arrange(desc(logCPM)) %>%
filter(FWER >= 0.05) %>%
filter(logCPM > quantile(.$logCPM, 0.5))
)
#openxlsx::write.xlsx(x=de_list, paste0(file='../results/top_DE_genes_tissue_vs_organoid_', i, '.xlsx'))
}
#pdf('../results/p_value_histograms.pdf')
ggpubr::ggarrange(plotlist=pval_h, nrow=n2mfrow(length(pval_h))[1], ncol=n2mfrow(length(pval_h))[2])
#dev.off()
design
fps = list.files('../results/', pattern='xlsx', full.names=T)
hm_BH = list()
hm_Holm = list()
for(i in tissues){
degenes_BH = readxl::read_excel(grep(i, fps, value=T), sheet=1) %>%
filter(logFC <= quantile(.$logFC, 0.01) | logFC >= quantile(.$logFC, 0.99))
degenes_Holm = readxl::read_excel(grep(i, fps, value=T), sheet=2) %>%
filter(logFC <= quantile(.$logFC, 0.01) | logFC >= quantile(.$logFC, 0.99))
if(nrow(degenes_BH) > 0){
mtx_BH = cpm(countsFilter$counts, log=T, prior.count=0.5) %>%
as.data.frame() %>%
select(grep(i, colnames(.))) %>%
rownames_to_column(var='gene_symbol') %>%
right_join(., degenes_BH[, c(1,2,6)], by='gene_symbol') %>%
arrange(logFC) %>%
filter(FDR < 0.01) %>%
select(-c(logFC, FDR)) %>%
column_to_rownames(var='gene_symbol') %>%
as.matrix()
colnames(mtx_BH) = gsub(paste0(i, '_|anoid|sue'), '', colnames(mtx_BH))
hm_BH[[i]] = Heatmap(scale(mtx_BH, center=F), cluster_rows=F,
column_title=paste0(i, ' DE genes, Benjamini-Hochberg/FDR<0.01\nlogFC<=qt0.01 or logFC>=qt0.99'),
name='norm_expr')
}
if(nrow(degenes_Holm) > 0){
mtx_Holm = cpm(countsFilter$counts, log=T, prior.count=0.5) %>%
as.data.frame() %>%
select(grep(i, colnames(.))) %>%
rownames_to_column(var='gene_symbol') %>%
right_join(., degenes_Holm[, c(1,2,6)], by='gene_symbol') %>%
arrange(logFC) %>%
filter(FWER < 0.05) %>%
select(-c(logFC, FWER)) %>%
column_to_rownames(var='gene_symbol') %>%
as.matrix()
colnames(mtx_Holm) = gsub(paste0(i, '_|anoid|sue'), '', colnames(mtx_Holm))
hm_Holm[[i]] = Heatmap(scale(mtx_Holm, center=F), cluster_rows=F,
column_title=paste0(i, ' DE genes, Holm/FWER<0.01\nlogFC<=qt0.01 or logFC>=qt0.99'),
name='norm_expr')
}
}
i = 'bladder'
#pdf(paste0('../results/DE_genes_tissue_vs_organoid_BHPadjust_', i, '.pdf'), height=24, pointsize=8)
print(hm_BH[[i]])
#dev.off()
i = 'endometrium'
#pdf(paste0('../results/DE_genes_tissue_vs_organoid_BHPadjust_', i, '.pdf'), height=28, pointsize=8)
print(hm_BH[[i]])
#dev.off()
i = 'kidney'
#pdf(paste0('../results/DE_genes_tissue_vs_organoid_BHPadjust_', i, '.pdf'), height=7, pointsize=8)
print(hm_BH[[i]])
#dev.off()
i = 'liver'
#pdf(paste0('../results/DE_genes_tissue_vs_organoid_BHPadjust_', i, '.pdf'), height=30, pointsize=8)
print(hm_BH[[i]])
#dev.off()
i = 'lung'
#pdf(paste0('../results/DE_genes_tissue_vs_organoid_BHPadjust_', i, '.pdf'), height=30, pointsize=8)
print(hm_BH[[i]])
#dev.off()
i = 'pancreas'
#pdf(paste0('../results/DE_genes_tissue_vs_organoid_BHPadjust_', i, '.pdf'), height=30, pointsize=8)
print(hm_BH[[i]])
#dev.off()
i = 'bladder'
#pdf(paste0('../results/DE_genes_tissue_vs_organoid_HolmPadjust_', i, '.pdf'), height=7)
print(hm_Holm[[i]])
#dev.off()
i = 'endometrium'
#pdf(paste0('../results/DE_genes_tissue_vs_organoid_HolmPadjust_', i, '.pdf'), height=7)
print(hm_Holm[[i]])
#dev.off()
# i = 'kidney'
# pdf(paste0('../results/DE_genes_tissue_vs_organoid_HolmPadjust_', i, '.pdf'), height=7)
# print(hm_Holm[[i]])
# dev.off()
i = 'liver'
#pdf(paste0('../results/DE_genes_tissue_vs_organoid_HolmPadjust_', i, '.pdf'), height=7)
print(hm_Holm[[i]])
#dev.off()
i = 'lung'
#pdf(paste0('../results/DE_genes_tissue_vs_organoid_HolmPadjust_', i, '.pdf'), height=10)
print(hm_Holm[[i]])
#dev.off()
i = 'pancreas'
#pdf(paste0('../results/DE_genes_tissue_vs_organoid_HolmPadjust_', i, '.pdf'), height=30)
print(hm_Holm[[i]])
#dev.off()
fps = list.files('../results/', pattern='xlsx', full.names=T)
venn_BH = list()
org_Up = list()
tis_Up = list()
for(i in tissues){
degenes_BH = readxl::read_excel(grep(i, fps, value=T), sheet=1) %>%
arrange(logFC)
org_Up[[i]] = degenes_BH$gene_symbol[degenes_BH$logFC < 0 & degenes_BH$FDR < 0.01]
tis_Up[[i]] = degenes_BH$gene_symbol[degenes_BH$logFC > 0 & degenes_BH$FDR < 0.01]
}
venn_BH[['organoid']] = venn.diagram(x=org_Up[-4], disable.logging=T, filename=NULL,
cat.pos=c(0, 350, 216, 144, 50),
main='DE Up genes in organoids compared to tissues - BH/FDR < 0.01',
fill=khroma::color('discrete rainbow')(5))
venn_BH[['tissue']] = venn.diagram(x=tis_Up[-4], disable.logging=T, filename=NULL,
cat.pos=c(0, 350, 216, 144, 50),
main='DE Up genes in tissues compared to organoids - BH/FDR < 0.01',
fill=khroma::color('discrete rainbow')(5))
#pdf('../results/organoid_DE_up_genes.pdf')
grid.draw(venn_BH$organoid)
#dev.off()
v1 = Venn(org_Up)
#pdf('../results/organoid_DE_up_genes_6setVenn.pdf')
plot(v1, doWeights=FALSE)
#dev.off()
#pdf('../results/tissue_DE_up_genes.pdf')
grid.draw(venn_BH$tissue)
#dev.off()
v2 = Venn(tis_Up)
#pdf('../results/tissue_DE_up_genes_6setVenn.pdf')
plot(v2, doWeights=FALSE)
#dev.off()
# Read Diff gene expression results to sort intersections by logFC
degstats = tibble()
for(i in tissues){
degstats = degstats %>%
bind_rows(readxl::read_excel(grep(i, fps, value=T), sheet=1))
}
degstats = degstats %>%
dplyr::select(gene_symbol, logCPM, logFC) %>%
#mutate(abs_logFC=abs(logFC)) %>%
#arrange(gene_symbol, desc(abs_logFC))
arrange(gene_symbol, desc(logCPM))
degstats = degstats[!duplicated(degstats$gene_symbol), ]
# Save combinations of intersections for organoids
vennInts = list()
for(i in 1:length(org_Up)){
# Get table with all possible combinations of elements, selecting i number of elemets at a time
combs = combn(1:length(org_Up), i)
for(j in 1:ncol(combs)){
# Get the complement to the intersection (will be substracted from result)
comp = c(1:length(org_Up))[!(1:length(org_Up) %in% combs[, j])]
# Get name of intersection
nameint = paste0(sort(names(org_Up)[combs[, j]]), collapse='_')
# Get intersection of all elements in combs[, j]
vennInts[[nameint]] = Reduce(intersect, org_Up[combs[, j]])
# Substract complement
vennInts[[nameint]] = vennInts[[nameint]][!(vennInts[[nameint]] %in% unlist(org_Up[comp]))]
vennInts[[nameint]] = degstats[degstats$gene_symbol %in% vennInts[[nameint]], ] %>%
arrange(desc(logCPM)) %>%
#dplyr::select(-abs_logFC)
vennInts[[nameint]] = bind_rows(tibble(gene_symbol=nameint, logCPM,=NA, logFC=NA), vennInts[[nameint]])
fps = list.files('../results/', pattern='xlsx', full.names=T)
venn_BH = list()
org_Up = list()
tis_Up = list()
for(i in tissues){
degenes_BH = readxl::read_excel(grep(i, fps, value=T), sheet=1) %>%
arrange(logFC)
org_Up[[i]] = degenes_BH$gene_symbol[degenes_BH$logFC < 0 & degenes_BH$FDR < 0.01]
tis_Up[[i]] = degenes_BH$gene_symbol[degenes_BH$logFC > 0 & degenes_BH$FDR < 0.01]
}
venn_BH[['organoid']] = venn.diagram(x=org_Up[-4], disable.logging=T, filename=NULL,
cat.pos=c(0, 350, 216, 144, 50),
main='DE Up genes in organoids compared to tissues - BH/FDR < 0.01',
fill=khroma::color('discrete rainbow')(5))
venn_BH[['tissue']] = venn.diagram(x=tis_Up[-4], disable.logging=T, filename=NULL,
cat.pos=c(0, 350, 216, 144, 50),
main='DE Up genes in tissues compared to organoids - BH/FDR < 0.01',
fill=khroma::color('discrete rainbow')(5))
#pdf('../results/organoid_DE_up_genes.pdf')
grid.draw(venn_BH$organoid)
#dev.off()
v1 = Venn(org_Up)
#pdf('../results/organoid_DE_up_genes_6setVenn.pdf')
plot(v1, doWeights=FALSE)
#dev.off()
#pdf('../results/tissue_DE_up_genes.pdf')
grid.draw(venn_BH$tissue)
#dev.off()
v2 = Venn(tis_Up)
#pdf('../results/tissue_DE_up_genes_6setVenn.pdf')
plot(v2, doWeights=FALSE)
#dev.off()
# Read Diff gene expression results to sort intersections by logFC
degstats = tibble()
for(i in tissues){
degstats = degstats %>%
bind_rows(readxl::read_excel(grep(i, fps, value=T), sheet=1))
}
degstats = degstats %>%
dplyr::select(gene_symbol, logCPM, logFC) %>%
#mutate(abs_logFC=abs(logFC)) %>%
#arrange(gene_symbol, desc(abs_logFC))
arrange(gene_symbol, desc(logCPM))
degstats = degstats[!duplicated(degstats$gene_symbol), ]
# Save combinations of intersections for organoids
vennInts = list()
for(i in 1:length(org_Up)){
# Get table with all possible combinations of elements, selecting i number of elemets at a time
combs = combn(1:length(org_Up), i)
for(j in 1:ncol(combs)){
# Get the complement to the intersection (will be substracted from result)
comp = c(1:length(org_Up))[!(1:length(org_Up) %in% combs[, j])]
# Get name of intersection
nameint = paste0(sort(names(org_Up)[combs[, j]]), collapse='_')
# Get intersection of all elements in combs[, j]
vennInts[[nameint]] = Reduce(intersect, org_Up[combs[, j]])
# Substract complement
vennInts[[nameint]] = vennInts[[nameint]][!(vennInts[[nameint]] %in% unlist(org_Up[comp]))]
vennInts[[nameint]] = degstats[degstats$gene_symbol %in% vennInts[[nameint]], ] %>%
arrange(desc(logCPM)) %>%
#dplyr::select(-abs_logFC)
vennInts[[nameint]] = bind_rows(tibble(gene_symbol=nameint, logCPM=NA, logFC=NA), vennInts[[nameint]])
}
}
degstats
readxl::read_excel(grep(i, fps, value=T), sheet=1)
i
i='bladder'
readxl::read_excel(grep(i, fps, value=T), sheet=1)
degstats = degstats %>%
bind_rows(readxl::read_excel(grep(i, fps, value=T), sheet=1))
# Read Diff gene expression results to sort intersections by logFC
degstats = tibble()
for(i in tissues){
degstats = degstats %>%
bind_rows(readxl::read_excel(grep(i, fps, value=T), sheet=1))
}
degstats = degstats %>%
dplyr::select(gene_symbol, logCPM, logFC) %>%
#mutate(abs_logFC=abs(logFC)) %>%
#arrange(gene_symbol, desc(abs_logFC))
arrange(gene_symbol, desc(logCPM))
degstats
vennInts[[nameint]]
vennInts[[nameint]] = degstats[degstats$gene_symbol %in% vennInts[[nameint]], ] %>%
arrange(desc(logCPM)) %>%
#dplyr::select(-abs_logFC)
vennInts[[nameint]] = bind_rows(tibble(gene_symbol=nameint, logCPM=NA, logFC=NA), vennInts[[nameint]])
fps = list.files('../results/', pattern='xlsx', full.names=T)
venn_BH = list()
org_Up = list()
tis_Up = list()
for(i in tissues){
degenes_BH = readxl::read_excel(grep(i, fps, value=T), sheet=1) %>%
arrange(logFC)
org_Up[[i]] = degenes_BH$gene_symbol[degenes_BH$logFC < 0 & degenes_BH$FDR < 0.01]
tis_Up[[i]] = degenes_BH$gene_symbol[degenes_BH$logFC > 0 & degenes_BH$FDR < 0.01]
}
venn_BH[['organoid']] = venn.diagram(x=org_Up[-4], disable.logging=T, filename=NULL,
cat.pos=c(0, 350, 216, 144, 50),
main='DE Up genes in organoids compared to tissues - BH/FDR < 0.01',
fill=khroma::color('discrete rainbow')(5))
venn_BH[['tissue']] = venn.diagram(x=tis_Up[-4], disable.logging=T, filename=NULL,
cat.pos=c(0, 350, 216, 144, 50),
main='DE Up genes in tissues compared to organoids - BH/FDR < 0.01',
fill=khroma::color('discrete rainbow')(5))
#pdf('../results/organoid_DE_up_genes.pdf')
grid.draw(venn_BH$organoid)
#dev.off()
v1 = Venn(org_Up)
#pdf('../results/organoid_DE_up_genes_6setVenn.pdf')
plot(v1, doWeights=FALSE)
#dev.off()
#pdf('../results/tissue_DE_up_genes.pdf')
grid.draw(venn_BH$tissue)
#dev.off()
v2 = Venn(tis_Up)
#pdf('../results/tissue_DE_up_genes_6setVenn.pdf')
plot(v2, doWeights=FALSE)
#dev.off()
# Read Diff gene expression results to sort intersections by logFC
degstats = tibble()
for(i in tissues){
degstats = degstats %>%
bind_rows(readxl::read_excel(grep(i, fps, value=T), sheet=1))
}
degstats = degstats %>%
dplyr::select(gene_symbol, logCPM, logFC) %>%
#mutate(abs_logFC=abs(logFC)) %>%
#arrange(gene_symbol, desc(abs_logFC))
arrange(gene_symbol, desc(logCPM))
degstats = degstats[!duplicated(degstats$gene_symbol), ]
# Save combinations of intersections for organoids
vennInts = list()
for(i in 1:length(org_Up)){
# Get table with all possible combinations of elements, selecting i number of elemets at a time
combs = combn(1:length(org_Up), i)
for(j in 1:ncol(combs)){
# Get the complement to the intersection (will be substracted from result)
comp = c(1:length(org_Up))[!(1:length(org_Up) %in% combs[, j])]
# Get name of intersection
nameint = paste0(sort(names(org_Up)[combs[, j]]), collapse='_')
# Get intersection of all elements in combs[, j]
vennInts[[nameint]] = Reduce(intersect, org_Up[combs[, j]])
# Substract complement
vennInts[[nameint]] = vennInts[[nameint]][!(vennInts[[nameint]] %in% unlist(org_Up[comp]))]
vennInts[[nameint]] = degstats[degstats$gene_symbol %in% vennInts[[nameint]], ] %>%
arrange(desc(logCPM))
#dplyr::select(-abs_logFC)
vennInts[[nameint]] = bind_rows(tibble(gene_symbol=nameint, logCPM=NA, logFC=NA), vennInts[[nameint]])
}
}
names(vennInts) = seq(1, length(vennInts))
openxlsx::write.xlsx(x=vennInts, file="../results/organoid_DE_up_genes_6setVenn_Intersections.xlsx")
# Save combinations of intersections for tissues
vennInts = list()
for(i in 1:length(tis_Up)){
# Get table with all possible combinations of elements, selecting i number of elemets at a time
combs = combn(1:length(tis_Up), i)
for(j in 1:ncol(combs)){
# Get the complement to the intersection (will be substracted from result)
comp = c(1:length(tis_Up))[!(1:length(tis_Up) %in% combs[, j])]
# Get name of intersection
nameint = paste0(sort(names(tis_Up)[combs[, j]]), collapse='_')
# Get intersection of all elements in combs[, j]
vennInts[[nameint]] = Reduce(intersect, tis_Up[combs[, j]])
# Substract complement
vennInts[[nameint]] = vennInts[[nameint]][!(vennInts[[nameint]] %in% unlist(tis_Up[comp]))]
vennInts[[nameint]] = degstats[degstats$gene_symbol %in% vennInts[[nameint]], ] %>%
arrange(desc(logCPM))
#dplyr::select(-abs_logFC)
vennInts[[nameint]] = bind_rows(tibble(gene_symbol=nameint, logCPM=NA, logFC=NA), vennInts[[nameint]])
}
}
names(vennInts) = seq(1, length(vennInts))
openxlsx::write.xlsx(x=vennInts, file="../results/tissue_DE_up_genes_6setVenn_Intersections.xlsx")
fps = list.files('../results/', pattern='xlsx', full.names=T)
venn_BH = list()
org_Up = list()
tis_Up = list()
for(i in tissues){
degenes_BH = readxl::read_excel(grep(i, fps, value=T), sheet=1) %>%
arrange(logFC)
org_Up[[i]] = degenes_BH$gene_symbol[degenes_BH$logFC < 0 & degenes_BH$FDR < 0.01]
tis_Up[[i]] = degenes_BH$gene_symbol[degenes_BH$logFC > 0 & degenes_BH$FDR < 0.01]
}
venn_BH[['organoid']] = venn.diagram(x=org_Up[-4], disable.logging=T, filename=NULL,
cat.pos=c(0, 350, 216, 144, 50),
main='DE Up genes in organoids compared to tissues - BH/FDR < 0.01',
fill=khroma::color('discrete rainbow')(5))
venn_BH[['tissue']] = venn.diagram(x=tis_Up[-4], disable.logging=T, filename=NULL,
cat.pos=c(0, 350, 216, 144, 50),
main='DE Up genes in tissues compared to organoids - BH/FDR < 0.01',
fill=khroma::color('discrete rainbow')(5))
#pdf('../results/organoid_DE_up_genes.pdf')
grid.draw(venn_BH$organoid)
#dev.off()
v1 = Venn(org_Up)
#pdf('../results/organoid_DE_up_genes_6setVenn.pdf')
plot(v1, doWeights=FALSE)
#dev.off()
#pdf('../results/tissue_DE_up_genes.pdf')
grid.draw(venn_BH$tissue)
#dev.off()
v2 = Venn(tis_Up)
#pdf('../results/tissue_DE_up_genes_6setVenn.pdf')
plot(v2, doWeights=FALSE)
#dev.off()
# Read Diff gene expression results to sort intersections by logFC
degstats = tibble()
for(i in tissues){
degstats = degstats %>%
bind_rows(readxl::read_excel(grep(i, fps, value=T), sheet=1))
}
degstats = degstats %>%
dplyr::select(gene_symbol, logCPM, logFC) %>%
#mutate(abs_logFC=abs(logFC)) %>%
#arrange(gene_symbol, desc(abs_logFC))
arrange(gene_symbol, desc(logCPM))
degstats = degstats[!duplicated(degstats$gene_symbol), ]
# Save combinations of intersections for organoids
vennInts = list()
for(i in 1:length(org_Up)){
# Get table with all possible combinations of elements, selecting i number of elemets at a time
combs = combn(1:length(org_Up), i)
for(j in 1:ncol(combs)){
# Get the complement to the intersection (will be substracted from result)
comp = c(1:length(org_Up))[!(1:length(org_Up) %in% combs[, j])]
# Get name of intersection
nameint = paste0(sort(names(org_Up)[combs[, j]]), collapse='_')
# Get intersection of all elements in combs[, j]
vennInts[[nameint]] = Reduce(intersect, org_Up[combs[, j]])
# Substract complement
vennInts[[nameint]] = vennInts[[nameint]][!(vennInts[[nameint]] %in% unlist(org_Up[comp]))]
vennInts[[nameint]] = degstats[degstats$gene_symbol %in% vennInts[[nameint]], ] %>%
arrange(desc(logCPM))
#dplyr::select(-abs_logFC)
vennInts[[nameint]] = bind_rows(tibble(gene_symbol=nameint, logCPM=NA, logFC=NA), vennInts[[nameint]])
}
}
names(vennInts) = seq(1, length(vennInts))
openxlsx::write.xlsx(x=vennInts, file="../results/organoid_DE_up_genes_6setVenn_Intersections.xlsx")
# Save combinations of intersections for tissues
vennInts = list()
for(i in 1:length(tis_Up)){
# Get table with all possible combinations of elements, selecting i number of elemets at a time
combs = combn(1:length(tis_Up), i)
for(j in 1:ncol(combs)){
# Get the complement to the intersection (will be substracted from result)
comp = c(1:length(tis_Up))[!(1:length(tis_Up) %in% combs[, j])]
# Get name of intersection
nameint = paste0(sort(names(tis_Up)[combs[, j]]), collapse='_')
# Get intersection of all elements in combs[, j]
vennInts[[nameint]] = Reduce(intersect, tis_Up[combs[, j]])
# Substract complement
vennInts[[nameint]] = vennInts[[nameint]][!(vennInts[[nameint]] %in% unlist(tis_Up[comp]))]
vennInts[[nameint]] = degstats[degstats$gene_symbol %in% vennInts[[nameint]], ] %>%
arrange(desc(logCPM))
#dplyr::select(-abs_logFC)
vennInts[[nameint]] = bind_rows(tibble(gene_symbol=nameint, logCPM=NA, logFC=NA), vennInts[[nameint]])
}
}
names(vennInts) = seq(1, length(vennInts))
openxlsx::write.xlsx(x=vennInts, file="../results/tissue_DE_up_genes_6setVenn_Intersections.xlsx")
# Filter lowly expressed genes
keep = filterByExpr(counts, group=counts$samples$group)
countsFilter = counts[keep, ]
mds = plotMDS(countsFilter, plot=F)
mds_df = tibble(sample=colnames(countsFilter),
group=samplemeta$group,
dog=samplemeta$ind,
dim1=mds$x,
dim2=mds$y)
pdf('../results/MDS_expr_profiles.pdf', width=9, height=7)
ggplot(mds_df, aes(x=dim1, y=dim2, color=group, shape=dog, label=group)) +
geom_point(size=4) +
ggrepel::geom_text_repel(color='black') +
xlab(paste0("Dim1 - Explained var=", round(mds$var.explained[1] * 100, 1), '%')) +
ylab(paste0("Dim2 - Explained var=", round(mds$var.explained[2] * 100, 1), '%')) +
ggtitle('Multidimensional scaling plot of log gene expression') +
khroma::scale_color_discreterainbow()
dev.off()
# Merge all DE genes from all comparisons
degenes = unique(c(unlist(org_Up), unlist(tis_Up)))
# Filter lowly expressed genes
keep = filterByExpr(counts, group=counts$samples$group)
countsFilterMDS = counts[keep, ]
countsFilterMDS = countsFilterMDS[rownames(countsFilterMDS) %in% degenes, ]
mdsDEGenes = plotMDS(countsFilterMDS, plot=F)
mdsDEGenes_df = tibble(sample=colnames(countsFilterMDS),
group=samplemeta$group,
dog=samplemeta$ind,
dim1=mdsDEGenes$x,
dim2=mdsDEGenes$y)
#pdf('../results/MDS_expr_profiles_OnlyDEGenes.pdf', width=9, height=7)
ggplot(mdsDEGenes_df, aes(x=dim1, y=dim2, color=group, shape=dog, label=group)) +
geom_point(size=4) +
ggrepel::geom_text_repel(color='black') +
xlab(paste0("Dim1 - Explained var=", round(mdsDEGenes$var.explained[1] * 100, 1), '%')) +
ylab(paste0("Dim2 - Explained var=", round(mdsDEGenes$var.explained[2] * 100, 1), '%')) +
ggtitle('Multidimensional scaling plot of log gene expression') +
khroma::scale_color_discreterainbow()
#dev.off()
pdf('../results/MDS_expr_profiles_OnlyDEGenes.pdf', width=9, height=7)
ggplot(mdsDEGenes_df, aes(x=dim1, y=dim2, color=group, shape=dog, label=group)) +
geom_point(size=4) +
ggrepel::geom_text_repel(color='black') +
xlab(paste0("Dim1 - Explained var=", round(mdsDEGenes$var.explained[1] * 100, 1), '%')) +
ylab(paste0("Dim2 - Explained var=", round(mdsDEGenes$var.explained[2] * 100, 1), '%')) +
ggtitle('Multidimensional scaling plot of log gene expression') +
khroma::scale_color_discreterainbow()
dev.off()
#dev.off()
getwd()
